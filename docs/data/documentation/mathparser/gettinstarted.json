{
  "abstract" : [
    {
      "text" : "Basic math expression parser built with Point•Free’s swift-parsing package (v0.12.0).",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/MathParser\/documentation\/MathParser"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/MathParser\/documentation\/MathParser\/GettinStarted"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "MathParser"
      }
    ],
    "role" : "article",
    "roleHeading" : "Article",
    "title" : "Getting Started"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "Usage-Example",
          "level" : 2,
          "text" : "Usage Example",
          "type" : "heading"
        },
        {
          "code" : [
            "let parser = MathParser()",
            "let evaluator = parser.parse(\"4 × sin(t × π) + 2 × sin(t × π)\")",
            "evaluator.eval(\"t\", value: 0.0) \/\/ => 0.0",
            "evaluator.eval(\"t\", value: 0.25) \/\/ => 4.2426406871192848",
            "evaluator.eval(\"t\", value: 0.5) \/\/ => 6",
            "evaluator.eval(\"t\", value: 1.0) \/\/ => 0"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The parser will return ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : " if it is unable to completely parse the expression. Alternatively, you can call",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/parseResult(_:)",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " to obtain a Swift ",
              "type" : "text"
            },
            {
              "code" : "Result",
              "type" : "codeVoice"
            },
            {
              "text" : " enum that will have a ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParserError",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " value when",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "parsing fails. This will contain a description of the parsing failure that comes from the swift-parsing library.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let evaluator = parser.parseResult(\"4 × sin(t × π\")",
            "print(evaluator)",
            "failure(error: unexpected input",
            "--> input:1:8",
            "1 | 4 × sin(t × π",
            "|        ^ expected end of input)",
            ""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "By default, the expression parser and evaluator handle the following symbols and functions:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Standard math operations: addition (",
                      "type" : "text"
                    },
                    {
                      "code" : "+",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : "), subtraction (",
                      "type" : "text"
                    },
                    {
                      "code" : "-",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : "), multiplication (",
                      "type" : "text"
                    },
                    {
                      "code" : "*",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : "), division (",
                      "type" : "text"
                    },
                    {
                      "code" : "\/",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : "),",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "and exponentiation (",
                      "type" : "text"
                    },
                    {
                      "code" : "^",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "The factorial of a number (",
                      "type" : "text"
                    },
                    {
                      "code" : "!",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "Constants: ",
                      "type" : "text"
                    },
                    {
                      "code" : "pi",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " (",
                      "type" : "text"
                    },
                    {
                      "code" : "π",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ") and ",
                      "type" : "text"
                    },
                    {
                      "code" : "e",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "1-argument functions: ",
                      "type" : "text"
                    },
                    {
                      "code" : "sin",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "asin",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "cos",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "acos",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "tan",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "atan",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "log10",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "ln",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " (",
                      "type" : "text"
                    },
                    {
                      "code" : "loge",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : "), ",
                      "type" : "text"
                    },
                    {
                      "code" : "log2",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "exp",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "ceil",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ",",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "code" : "floor",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "round",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "sqrt",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " (",
                      "type" : "text"
                    },
                    {
                      "code" : "√",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : "), ",
                      "type" : "text"
                    },
                    {
                      "code" : "cbrt",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " (cube root), ",
                      "type" : "text"
                    },
                    {
                      "code" : "abs",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "sgn",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "!",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " (factorial)",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "2-argument functions: ",
                      "type" : "text"
                    },
                    {
                      "code" : "atan",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "hypot",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", ",
                      "type" : "text"
                    },
                    {
                      "code" : "pow",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "alternative math operator symbols: ",
                      "type" : "text"
                    },
                    {
                      "code" : "×",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " for multiplication and ",
                      "type" : "text"
                    },
                    {
                      "code" : "÷",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " for division (see example above for use of ",
                      "type" : "text"
                    },
                    {
                      "code" : "×",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "Note that the factorial operator and function (",
              "type" : "text"
            },
            {
              "code" : "!",
              "type" : "codeVoice"
            },
            {
              "text" : ") only give exact values up to ",
              "type" : "text"
            },
            {
              "code" : "20!",
              "type" : "codeVoice"
            },
            {
              "text" : ". They treat all values as",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "if truncated to an integer before performing the multiplications. Thus, ",
              "type" : "text"
            },
            {
              "code" : "12.3!",
              "type" : "codeVoice"
            },
            {
              "text" : " is only ",
              "type" : "text"
            },
            {
              "code" : "12!",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can reference additional symbols or variables and functions by providing your own mapping functions. There are two",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "places where this can be done:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/init(variables:variableDict:unaryFunctions:unaryFunctionDict:binaryFunctions:binaryFunctionDict:enableImpliedMultiplication:)",
                      "isActive" : true,
                      "type" : "reference"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/Evaluator\/eval(variables:unaryFunctions:binaryFunctions:)",
                      "isActive" : true,
                      "type" : "reference"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "If a symbol or function does not exist during an ",
              "type" : "text"
            },
            {
              "code" : "eval",
              "type" : "codeVoice"
            },
            {
              "text" : " call, the final result will be ",
              "type" : "text"
            },
            {
              "code" : "NaN",
              "type" : "codeVoice"
            },
            {
              "text" : ". If a symbol is resolved",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "during parsing, it will be replaced with the symbol’s value, and likewise for any math expressions and function calls",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "that can be resolved to constant values during the parse. Otherwise, the symbols will be resolved during a future",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "eval",
              "type" : "codeVoice"
            },
            {
              "text" : " call.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "You can get the unresolved symbol names from the ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/Evaluator\/unresolved",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " attribute. It returns three collections for",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "unresolved variables, unary functions, and binary function names.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Precedence",
          "level" : 2,
          "text" : "Precedence",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The usual math operations follow the traditional precedence hierarchy: multiplication and division operations happen",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "before addition and subtraction, so ",
              "type" : "text"
            },
            {
              "code" : "1 + 2 * 3 - 4 \/ 5 + 6",
              "type" : "codeVoice"
            },
            {
              "text" : " evaluates the same as ",
              "type" : "text"
            },
            {
              "code" : "1 + (2 * 3) - (4 \/ 5) + 6",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "There are three additional operators, one for exponentiations (^) which is higher than the previous ones,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "so ",
              "type" : "text"
            },
            {
              "code" : "2 * 3 ^ 4 + 5",
              "type" : "codeVoice"
            },
            {
              "text" : " is the same as ",
              "type" : "text"
            },
            {
              "code" : "2 * (3 ^ 4) + 5",
              "type" : "codeVoice"
            },
            {
              "text" : ". It is also right-associative, so ",
              "type" : "text"
            },
            {
              "code" : "2 ^ 3 ^ 4",
              "type" : "codeVoice"
            },
            {
              "text" : " is evaluated as",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "2 ^ (3 ^ 4)",
              "type" : "codeVoice"
            },
            {
              "text" : " instead of ",
              "type" : "text"
            },
            {
              "code" : "(2 ^ 3) ^ 4",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "There are two other operations that are even higher in precedence than exponentiation:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "negation (",
                      "type" : "text"
                    },
                    {
                      "code" : "-",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ") – ",
                      "type" : "text"
                    },
                    {
                      "code" : "-3.4",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "factorial (",
                      "type" : "text"
                    },
                    {
                      "code" : "!",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ") – ",
                      "type" : "text"
                    },
                    {
                      "code" : "12!",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "inlineContent" : [
            {
              "text" : "Note that factorial of a negative number is undefined, so negation and factorial cannot be combined. In other words,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "parsing ",
              "type" : "text"
            },
            {
              "code" : "-3!",
              "type" : "codeVoice"
            },
            {
              "text" : " returns ",
              "type" : "text"
            },
            {
              "code" : "nil",
              "type" : "codeVoice"
            },
            {
              "text" : ". Also, factorial is only done on the integral portion of a number, so ",
              "type" : "text"
            },
            {
              "code" : "12.3!",
              "type" : "codeVoice"
            },
            {
              "text" : " will parse but",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the resulting value will be the same as ",
              "type" : "text"
            },
            {
              "code" : "12!",
              "type" : "codeVoice"
            },
            {
              "text" : ". In effect, factorial always operates as ",
              "type" : "text"
            },
            {
              "code" : "floor(x)!",
              "type" : "codeVoice"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "code" : "!(floor(x))",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/mathparser\/gettinstarted"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://MathParser/documentation/MathParser": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "MathParser",
  "type" : "topic",
  "url" : "\/documentation\/mathparser"
},
"doc://MathParser/documentation/MathParser/Evaluator/eval(variables:unaryFunctions:binaryFunctions:)": {
  "abstract" : [
    {
      "text" : "Evaluate the token to obtain a value. By default will use symbol map and function map given to ",
      "type" : "text"
    },
    {
      "code" : "init",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "eval"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "variables"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC",
      "text" : "MathParser"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC11VariableMapa",
      "text" : "VariableMap"
    },
    {
      "kind" : "text",
      "text" : "?, "
    },
    {
      "kind" : "externalParam",
      "text" : "unaryFunctions"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC",
      "text" : "MathParser"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC16UnaryFunctionMapa",
      "text" : "UnaryFunctionMap"
    },
    {
      "kind" : "text",
      "text" : "?, "
    },
    {
      "kind" : "externalParam",
      "text" : "binaryFunctions"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC",
      "text" : "MathParser"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC17BinaryFunctionMapa",
      "text" : "BinaryFunctionMap"
    },
    {
      "kind" : "text",
      "text" : "?) -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sd",
      "text" : "Double"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/Evaluator\/eval(variables:unaryFunctions:binaryFunctions:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "eval(variables:unaryFunctions:binaryFunctions:)",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/evaluator\/eval(variables:unaryfunctions:binaryfunctions:)"
},
"doc://MathParser/documentation/MathParser/Evaluator/unresolved": {
  "abstract" : [
    {
      "text" : "Obtain unresolved names of symbols for variables and functions",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "unresolved"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParser10UnresolvedV",
      "text" : "Unresolved"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/Evaluator\/unresolved",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "unresolved",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/evaluator\/unresolved"
},
"doc://MathParser/documentation/MathParser/MathParser/init(variables:variableDict:unaryFunctions:unaryFunctionDict:binaryFunctions:binaryFunctionDict:enableImpliedMultiplication:)": {
  "abstract" : [
    {
      "text" : "Construct new parser.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "identifier",
      "text" : "init"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "variables"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC",
      "text" : "MathParser"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC11VariableMapa",
      "text" : "VariableMap"
    },
    {
      "kind" : "text",
      "text" : "?, "
    },
    {
      "kind" : "externalParam",
      "text" : "variableDict"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC",
      "text" : "MathParser"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC12VariableDicta",
      "text" : "VariableDict"
    },
    {
      "kind" : "text",
      "text" : "?, "
    },
    {
      "kind" : "externalParam",
      "text" : "unaryFunctions"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC",
      "text" : "MathParser"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC16UnaryFunctionMapa",
      "text" : "UnaryFunctionMap"
    },
    {
      "kind" : "text",
      "text" : "?, "
    },
    {
      "kind" : "externalParam",
      "text" : "unaryFunctionDict"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC",
      "text" : "MathParser"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC17UnaryFunctionDicta",
      "text" : "UnaryFunctionDict"
    },
    {
      "kind" : "text",
      "text" : "?, "
    },
    {
      "kind" : "externalParam",
      "text" : "binaryFunctions"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC",
      "text" : "MathParser"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC17BinaryFunctionMapa",
      "text" : "BinaryFunctionMap"
    },
    {
      "kind" : "text",
      "text" : "?, "
    },
    {
      "kind" : "externalParam",
      "text" : "binaryFunctionDict"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC",
      "text" : "MathParser"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC18BinaryFunctionDicta",
      "text" : "BinaryFunctionDict"
    },
    {
      "kind" : "text",
      "text" : "?, "
    },
    {
      "kind" : "externalParam",
      "text" : "enableImpliedMultiplication"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sb",
      "text" : "Bool"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/init(variables:variableDict:unaryFunctions:unaryFunctionDict:binaryFunctions:binaryFunctionDict:enableImpliedMultiplication:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "init(variables:variableDict:unaryFunctions:unaryFunctionDict:binaryFunctions:binaryFunctionDict:enableImpliedMultiplication:)",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/mathparser\/init(variables:variabledict:unaryfunctions:unaryfunctiondict:binaryfunctions:binaryfunctiondict:enableimpliedmultiplication:)"
},
"doc://MathParser/documentation/MathParser/MathParser/parseResult(_:)": {
  "abstract" : [
    {
      "text" : "Parse an expression into a token that can be evaluated at a later time, and returns a ",
      "type" : "text"
    },
    {
      "code" : "Result",
      "type" : "codeVoice"
    },
    {
      "text" : " value that conveys",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "information about the parsing result.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "parseResult"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:SS",
      "text" : "String"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC",
      "text" : "MathParser"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC6Resulta",
      "text" : "Result"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/parseResult(_:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "parseResult(_:)",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/mathparser\/parseresult(_:)"
},
"doc://MathParser/documentation/MathParser/MathParserError": {
  "abstract" : [
    {
      "text" : "Error type that describes a failure in either text parsing or token evaluation.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "enum"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "MathParserError"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParserError",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "MathParserError"
    }
  ],
  "role" : "symbol",
  "title" : "MathParserError",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/mathparsererror"
}
}
}