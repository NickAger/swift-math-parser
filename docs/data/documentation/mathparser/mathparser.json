{
  "abstract" : [
    {
      "text" : "A parser for simple math expressions made up of five common operations addition, subtraction, multiplication,",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "division, and exponentiation, as well as one- and two-argument functions like ",
      "type" : "text"
    },
    {
      "code" : "sqrt",
      "type" : "codeVoice"
    },
    {
      "text" : " and ",
      "type" : "text"
    },
    {
      "code" : "sin",
      "type" : "codeVoice"
    },
    {
      "text" : ", and named",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "variables \/ symbols.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/MathParser\/documentation\/MathParser"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParser"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "s:10MathParserAAC",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "class"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "MathParser"
      }
    ],
    "modules" : [
      {
        "name" : "MathParser"
      }
    ],
    "navigatorTitle" : [
      {
        "kind" : "identifier",
        "text" : "MathParser"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Class",
    "symbolKind" : "class",
    "title" : "MathParser"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "final"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "keyword",
              "text" : "class"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "MathParser"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "content" : [
        {
          "anchor" : "overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The expression",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "4 * sin(t * π)"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "is a legal math expression according to the parser. It references the known ",
              "type" : "text"
            },
            {
              "code" : "sin",
              "type" : "codeVoice"
            },
            {
              "text" : " function, the known ",
              "type" : "text"
            },
            {
              "code" : "pi",
              "type" : "codeVoice"
            },
            {
              "text" : " constant",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(here using the symbol π),",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "and an unknown variable ",
              "type" : "text"
            },
            {
              "code" : "t",
              "type" : "codeVoice"
            },
            {
              "text" : ". Parsing a legal expression results in an ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/Evaluator",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " instance that can be used to obtain",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "Double",
              "type" : "codeVoice"
            },
            {
              "text" : " results from the expression, such as when the value for ",
              "type" : "text"
            },
            {
              "code" : "t",
              "type" : "codeVoice"
            },
            {
              "text" : " is known.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "topicSections" : [
    {
      "identifiers" : [
        "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/init(symbols:functions:enableImpliedMultiplication:)",
        "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/init(symbols:unaryFunctions:binaryFunctions:enableImpliedMultiplication:)",
        "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/init(variables:variableDict:unaryFunctions:unaryFunctionDict:binaryFunctions:binaryFunctionDict:enableImpliedMultiplication:)"
      ],
      "title" : "Initializers"
    },
    {
      "identifiers" : [
        "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/binaryFunctions",
        "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/symbols",
        "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/unaryFunctions",
        "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/variables"
      ],
      "title" : "Instance Properties"
    },
    {
      "identifiers" : [
        "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/parse(_:)",
        "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/parseResult(_:)"
      ],
      "title" : "Instance Methods"
    },
    {
      "identifiers" : [
        "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/BinaryFunction",
        "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/BinaryFunctionDict",
        "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/BinaryFunctionMap",
        "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/SymbolMap",
        "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/UnaryFunction",
        "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/UnaryFunctionDict",
        "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/UnaryFunctionMap",
        "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/VariableDict",
        "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/VariableMap"
      ],
      "title" : "Type Aliases"
    },
    {
      "identifiers" : [
        "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/defaultBinaryFunctions",
        "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/defaultSymbols",
        "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/defaultUnaryFunctions",
        "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/defaultVariables"
      ],
      "title" : "Type Properties"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/mathparser\/mathparser"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://MathParser/documentation/MathParser": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "MathParser",
  "type" : "topic",
  "url" : "\/documentation\/mathparser"
},
"doc://MathParser/documentation/MathParser/Evaluator": {
  "abstract" : [
    {
      "text" : "Evaluator of parsed tokens.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Evaluator"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/Evaluator",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Evaluator"
    }
  ],
  "role" : "symbol",
  "title" : "Evaluator",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/evaluator"
},
"doc://MathParser/documentation/MathParser/MathParser": {
  "abstract" : [
    {
      "text" : "A parser for simple math expressions made up of five common operations addition, subtraction, multiplication,",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "division, and exponentiation, as well as one- and two-argument functions like ",
      "type" : "text"
    },
    {
      "code" : "sqrt",
      "type" : "codeVoice"
    },
    {
      "text" : " and ",
      "type" : "text"
    },
    {
      "code" : "sin",
      "type" : "codeVoice"
    },
    {
      "text" : ", and named",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "variables \/ symbols.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "MathParser"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParser",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "MathParser"
    }
  ],
  "role" : "symbol",
  "title" : "MathParser",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/mathparser"
},
"doc://MathParser/documentation/MathParser/MathParser/BinaryFunction": {
  "abstract" : [
    {
      "text" : "Type definition for a reduction of two ",
      "type" : "text"
    },
    {
      "code" : "Double",
      "type" : "codeVoice"
    },
    {
      "text" : " values to one such as by a 2-argument function.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "typealias"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "BinaryFunction"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/BinaryFunction",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "BinaryFunction"
    }
  ],
  "role" : "symbol",
  "title" : "MathParser.BinaryFunction",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/mathparser\/binaryfunction"
},
"doc://MathParser/documentation/MathParser/MathParser/BinaryFunctionDict": {
  "abstract" : [
    {
      "text" : "Dictionary of binary function names and their implementations.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "typealias"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "BinaryFunctionDict"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/BinaryFunctionDict",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "BinaryFunctionDict"
    }
  ],
  "role" : "symbol",
  "title" : "MathParser.BinaryFunctionDict",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/mathparser\/binaryfunctiondict"
},
"doc://MathParser/documentation/MathParser/MathParser/BinaryFunctionMap": {
  "abstract" : [
    {
      "text" : "Mapping of names to an optional transform function of 2 arguments",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "typealias"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "BinaryFunctionMap"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/BinaryFunctionMap",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "BinaryFunctionMap"
    }
  ],
  "role" : "symbol",
  "title" : "MathParser.BinaryFunctionMap",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/mathparser\/binaryfunctionmap"
},
"doc://MathParser/documentation/MathParser/MathParser/SymbolMap": {
  "abstract" : [
    {
      "text" : "Deprecated",
      "type" : "text"
    }
  ],
  "deprecated" : true,
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "typealias"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "SymbolMap"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/SymbolMap",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "SymbolMap"
    }
  ],
  "role" : "symbol",
  "title" : "MathParser.SymbolMap",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/mathparser\/symbolmap"
},
"doc://MathParser/documentation/MathParser/MathParser/UnaryFunction": {
  "abstract" : [
    {
      "text" : "Type definition for a mapping of one ",
      "type" : "text"
    },
    {
      "code" : "Double",
      "type" : "codeVoice"
    },
    {
      "text" : " value to another such as by a 1-argument function.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "typealias"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "UnaryFunction"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/UnaryFunction",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "UnaryFunction"
    }
  ],
  "role" : "symbol",
  "title" : "MathParser.UnaryFunction",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/mathparser\/unaryfunction"
},
"doc://MathParser/documentation/MathParser/MathParser/UnaryFunctionDict": {
  "abstract" : [
    {
      "text" : "Dictionary of unary function names and their implementations.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "typealias"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "UnaryFunctionDict"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/UnaryFunctionDict",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "UnaryFunctionDict"
    }
  ],
  "role" : "symbol",
  "title" : "MathParser.UnaryFunctionDict",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/mathparser\/unaryfunctiondict"
},
"doc://MathParser/documentation/MathParser/MathParser/UnaryFunctionMap": {
  "abstract" : [
    {
      "text" : "Mapping of names to an optional transform function of 1 argument.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "typealias"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "UnaryFunctionMap"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/UnaryFunctionMap",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "UnaryFunctionMap"
    }
  ],
  "role" : "symbol",
  "title" : "MathParser.UnaryFunctionMap",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/mathparser\/unaryfunctionmap"
},
"doc://MathParser/documentation/MathParser/MathParser/VariableDict": {
  "abstract" : [
    {
      "text" : "Dictionary of variable names and their values.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "typealias"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "VariableDict"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/VariableDict",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "VariableDict"
    }
  ],
  "role" : "symbol",
  "title" : "MathParser.VariableDict",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/mathparser\/variabledict"
},
"doc://MathParser/documentation/MathParser/MathParser/VariableMap": {
  "abstract" : [
    {
      "text" : "Mapping of variable names to an optional Double.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "typealias"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "VariableMap"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/VariableMap",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "VariableMap"
    }
  ],
  "role" : "symbol",
  "title" : "MathParser.VariableMap",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/mathparser\/variablemap"
},
"doc://MathParser/documentation/MathParser/MathParser/binaryFunctions": {
  "abstract" : [
    {
      "text" : "Function mapping to use during parsing and perhaps evaluation",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "let"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "binaryFunctions"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC",
      "text" : "MathParser"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC17BinaryFunctionMapa",
      "text" : "BinaryFunctionMap"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/binaryFunctions",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "binaryFunctions",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/mathparser\/binaryfunctions"
},
"doc://MathParser/documentation/MathParser/MathParser/defaultBinaryFunctions": {
  "abstract" : [
    {
      "text" : "Default 2-argument functions to use for parsing and evaluation.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "let"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "defaultBinaryFunctions"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC",
      "text" : "MathParser"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC18BinaryFunctionDicta",
      "text" : "BinaryFunctionDict"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/defaultBinaryFunctions",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "defaultBinaryFunctions",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/mathparser\/defaultbinaryfunctions"
},
"doc://MathParser/documentation/MathParser/MathParser/defaultSymbols": {
  "abstract" : [

  ],
  "deprecated" : true,
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "defaultSymbols"
    },
    {
      "kind" : "text",
      "text" : ": ["
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:SS",
      "text" : "String"
    },
    {
      "kind" : "text",
      "text" : " : "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sd",
      "text" : "Double"
    },
    {
      "kind" : "text",
      "text" : "]"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/defaultSymbols",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "defaultSymbols",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/mathparser\/defaultsymbols"
},
"doc://MathParser/documentation/MathParser/MathParser/defaultUnaryFunctions": {
  "abstract" : [
    {
      "text" : "Default 1-argument functions to use for parsing and evaluation.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "let"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "defaultUnaryFunctions"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC",
      "text" : "MathParser"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC17UnaryFunctionDicta",
      "text" : "UnaryFunctionDict"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/defaultUnaryFunctions",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "defaultUnaryFunctions",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/mathparser\/defaultunaryfunctions"
},
"doc://MathParser/documentation/MathParser/MathParser/defaultVariables": {
  "abstract" : [
    {
      "text" : "Default symbols to use for parsing.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "let"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "defaultVariables"
    },
    {
      "kind" : "text",
      "text" : ": ["
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:SS",
      "text" : "String"
    },
    {
      "kind" : "text",
      "text" : " : "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sd",
      "text" : "Double"
    },
    {
      "kind" : "text",
      "text" : "]"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/defaultVariables",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "defaultVariables",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/mathparser\/defaultvariables"
},
"doc://MathParser/documentation/MathParser/MathParser/init(symbols:functions:enableImpliedMultiplication:)": {
  "abstract" : [

  ],
  "deprecated" : true,
  "fragments" : [
    {
      "kind" : "identifier",
      "text" : "init"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "symbols"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC",
      "text" : "MathParser"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC9SymbolMapa",
      "text" : "SymbolMap"
    },
    {
      "kind" : "text",
      "text" : "?, "
    },
    {
      "kind" : "externalParam",
      "text" : "functions"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC",
      "text" : "MathParser"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC16UnaryFunctionMapa",
      "text" : "UnaryFunctionMap"
    },
    {
      "kind" : "text",
      "text" : "?, "
    },
    {
      "kind" : "externalParam",
      "text" : "enableImpliedMultiplication"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sb",
      "text" : "Bool"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/init(symbols:functions:enableImpliedMultiplication:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "init(symbols:functions:enableImpliedMultiplication:)",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/mathparser\/init(symbols:functions:enableimpliedmultiplication:)"
},
"doc://MathParser/documentation/MathParser/MathParser/init(symbols:unaryFunctions:binaryFunctions:enableImpliedMultiplication:)": {
  "abstract" : [

  ],
  "deprecated" : true,
  "fragments" : [
    {
      "kind" : "identifier",
      "text" : "init"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "symbols"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC",
      "text" : "MathParser"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC9SymbolMapa",
      "text" : "SymbolMap"
    },
    {
      "kind" : "text",
      "text" : "?, "
    },
    {
      "kind" : "externalParam",
      "text" : "unaryFunctions"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC",
      "text" : "MathParser"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC16UnaryFunctionMapa",
      "text" : "UnaryFunctionMap"
    },
    {
      "kind" : "text",
      "text" : "?, "
    },
    {
      "kind" : "externalParam",
      "text" : "binaryFunctions"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC",
      "text" : "MathParser"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC17BinaryFunctionMapa",
      "text" : "BinaryFunctionMap"
    },
    {
      "kind" : "text",
      "text" : "?, "
    },
    {
      "kind" : "externalParam",
      "text" : "enableImpliedMultiplication"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sb",
      "text" : "Bool"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/init(symbols:unaryFunctions:binaryFunctions:enableImpliedMultiplication:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "init(symbols:unaryFunctions:binaryFunctions:enableImpliedMultiplication:)",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/mathparser\/init(symbols:unaryfunctions:binaryfunctions:enableimpliedmultiplication:)"
},
"doc://MathParser/documentation/MathParser/MathParser/init(variables:variableDict:unaryFunctions:unaryFunctionDict:binaryFunctions:binaryFunctionDict:enableImpliedMultiplication:)": {
  "abstract" : [
    {
      "text" : "Construct new parser.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "identifier",
      "text" : "init"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "variables"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC",
      "text" : "MathParser"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC11VariableMapa",
      "text" : "VariableMap"
    },
    {
      "kind" : "text",
      "text" : "?, "
    },
    {
      "kind" : "externalParam",
      "text" : "variableDict"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC",
      "text" : "MathParser"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC12VariableDicta",
      "text" : "VariableDict"
    },
    {
      "kind" : "text",
      "text" : "?, "
    },
    {
      "kind" : "externalParam",
      "text" : "unaryFunctions"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC",
      "text" : "MathParser"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC16UnaryFunctionMapa",
      "text" : "UnaryFunctionMap"
    },
    {
      "kind" : "text",
      "text" : "?, "
    },
    {
      "kind" : "externalParam",
      "text" : "unaryFunctionDict"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC",
      "text" : "MathParser"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC17UnaryFunctionDicta",
      "text" : "UnaryFunctionDict"
    },
    {
      "kind" : "text",
      "text" : "?, "
    },
    {
      "kind" : "externalParam",
      "text" : "binaryFunctions"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC",
      "text" : "MathParser"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC17BinaryFunctionMapa",
      "text" : "BinaryFunctionMap"
    },
    {
      "kind" : "text",
      "text" : "?, "
    },
    {
      "kind" : "externalParam",
      "text" : "binaryFunctionDict"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC",
      "text" : "MathParser"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC18BinaryFunctionDicta",
      "text" : "BinaryFunctionDict"
    },
    {
      "kind" : "text",
      "text" : "?, "
    },
    {
      "kind" : "externalParam",
      "text" : "enableImpliedMultiplication"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sb",
      "text" : "Bool"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/init(variables:variableDict:unaryFunctions:unaryFunctionDict:binaryFunctions:binaryFunctionDict:enableImpliedMultiplication:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "init(variables:variableDict:unaryFunctions:unaryFunctionDict:binaryFunctions:binaryFunctionDict:enableImpliedMultiplication:)",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/mathparser\/init(variables:variabledict:unaryfunctions:unaryfunctiondict:binaryfunctions:binaryfunctiondict:enableimpliedmultiplication:)"
},
"doc://MathParser/documentation/MathParser/MathParser/parse(_:)": {
  "abstract" : [
    {
      "text" : "Parse an expression into a token that can be evaluated at a later time.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "parse"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:SS",
      "text" : "String"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParser9EvaluatorV",
      "text" : "Evaluator"
    },
    {
      "kind" : "text",
      "text" : "?"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/parse(_:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "parse(_:)",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/mathparser\/parse(_:)"
},
"doc://MathParser/documentation/MathParser/MathParser/parseResult(_:)": {
  "abstract" : [
    {
      "text" : "Parse an expression into a token that can be evaluated at a later time. Returns a ",
      "type" : "text"
    },
    {
      "code" : "Result",
      "type" : "codeVoice"
    },
    {
      "text" : " enum with two cases:",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "parseResult"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:SS",
      "text" : "String"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:s6ResultO",
      "text" : "Result"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParser9EvaluatorV",
      "text" : "Evaluator"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParser0aB5ErrorV",
      "text" : "MathParserError"
    },
    {
      "kind" : "text",
      "text" : ">"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/parseResult(_:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "parseResult(_:)",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/mathparser\/parseresult(_:)"
},
"doc://MathParser/documentation/MathParser/MathParser/symbols": {
  "abstract" : [
    {
      "text" : "Symbol\/variable mapping to use during parsing and perhaps evaluation",
      "type" : "text"
    }
  ],
  "deprecated" : true,
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "symbols"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC",
      "text" : "MathParser"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC11VariableMapa",
      "text" : "VariableMap"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/symbols",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "symbols",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/mathparser\/symbols"
},
"doc://MathParser/documentation/MathParser/MathParser/unaryFunctions": {
  "abstract" : [
    {
      "text" : "Function mapping to use during parsing and perhaps evaluation",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "let"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "unaryFunctions"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC",
      "text" : "MathParser"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC16UnaryFunctionMapa",
      "text" : "UnaryFunctionMap"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/unaryFunctions",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "unaryFunctions",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/mathparser\/unaryfunctions"
},
"doc://MathParser/documentation/MathParser/MathParser/variables": {
  "abstract" : [
    {
      "text" : "Symbol\/variable mapping to use during parsing and perhaps evaluation",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "let"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "variables"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC",
      "text" : "MathParser"
    },
    {
      "kind" : "text",
      "text" : "."
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:10MathParserAAC11VariableMapa",
      "text" : "VariableMap"
    }
  ],
  "identifier" : "doc:\/\/MathParser\/documentation\/MathParser\/MathParser\/variables",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "variables",
  "type" : "topic",
  "url" : "\/documentation\/mathparser\/mathparser\/variables"
}
}
}